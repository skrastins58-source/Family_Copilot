name: CI-CD Symphony

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  generate-previous-summary:
    name: Generate Previous Summary (main)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Lint
        run: npm run lint

      - name: Run Tests and Collect Coverage
        run: npm run coverage

      - name: Build Project
        run: npm run build

      - name: Generate previous-summary.json
        run: node generate-summary.js previous-summary.json

      - name: Upload previous-summary.json
        uses: actions/upload-artifact@v4
        with:
          name: previous-summary
          path: previous-summary.json
  validate:
    name: Validate and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Lint
        run: npm run lint

      - name: Run Tests and Collect Coverage
        run: npm run coverage

      - name: Build Project
        run: npm run build

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

      - name: üìä Run analysis
        id: analysis
        run: node scripts/run-analysis.js

      - name: üìú Generate history.json
        run: node scripts/generate-history.js

      - name: üîç Compare coverage
        if: github.event_name == 'pull_request'
        run: npm run ci:compare-coverage

      - name: Download previous-summary.json
        if: github.event_name == 'pull_request'
        uses: actions/download-artifact@v4
        with:
          name: previous-summary
          path: .

      - name: Post PR Quality Summary
        if: github.event_name == 'pull_request'
        run: node post-pr-summary.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: üè∑Ô∏è Generate badges
        id: badges
        run: node scripts/generate-badges.js

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [validate, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: validate
    if: always() && (needs.validate.result == 'success' || needs.validate.result == 'failure')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: üí¨ Send Slack notification
        if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          JOB_STATUS: ${{ needs.analysis.result }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }} # Set default in script or repo/organization env
          SLACK_USERNAME: 'CI/CD Symphony'
          SLACK_ICON: ':musical_note:'
        run: node scripts/send-notification.js
