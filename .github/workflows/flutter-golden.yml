name: Flutter Golden Tests

on:
  pull_request:
    branches: [ main, master, develop ]
  push:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  golden-tests:
    name: Golden Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Verify dependencies
        run: flutter pub deps
        
      - name: Analyze code
        run: flutter analyze
        
      - name: Check formatting
        run: dart format --output=none --set-exit-if-changed .
        
      - name: Run unit tests
        run: flutter test --coverage --test-randomize-ordering-seed=random
        
      - name: Validate golden test structure
        run: ./scripts/validate_golden_structure.sh
        
      - name: Run golden test comparison
        run: ./scripts/compare_golden_tests.sh
        
      - name: Upload golden test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: golden-test-failures-${{ github.run_number }}
          path: |
            test/failures/
            test/diff/
            goldens/
            validation_report.md
            
      - name: Comment PR on golden test failure
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Try to read the PR comment data if it exists
            let comment = '## 🖼️ Golden Test Failures\n\n';
            
            try {
              if (fs.existsSync('test/failures/pr_comment.json')) {
                const commentData = JSON.parse(fs.readFileSync('test/failures/pr_comment.json', 'utf8'));
                comment = `## ${commentData.title}\n\n${commentData.body}`;
              } else {
                comment += 'Golden tests failed. The UI has changed compared to the reference images.\n\n';
                comment += '### What to do:\n';
                comment += '1. Review the visual changes in the uploaded artifacts\n';
                comment += '2. If changes are intentional, update golden images locally:\n';
                comment += '   ```bash\n';
                comment += '   flutter test test/widget_test.dart --update-goldens\n';
                comment += '   git add goldens/\n';
                comment += '   git commit -m "Update golden images"\n';
                comment += '   ```\n';
                comment += '3. If changes are unintentional, fix the UI code\n\n';
              }
            } catch (error) {
              console.log('Could not read PR comment data, using default message');
            }
            
            comment += `\n\n📎 **Artifacts**: Check the uploaded artifacts \`golden-test-failures-${{ github.run_number }}\` for detailed comparison images.\n`;
            comment += `🔍 **Run ID**: ${{ github.run_id }}\n`;
            comment += `📅 **Timestamp**: ${new Date().toISOString()}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
  golden-validation:
    name: Golden Structure Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate golden file changes
        run: |
          echo "🔍 Checking for golden file changes in PR..."
          
          # Get list of changed files
          git fetch origin ${{ github.event.pull_request.base.ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD)
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Check if golden files changed
          GOLDEN_CHANGES=$(echo "$CHANGED_FILES" | grep "^goldens/" || true)
          
          if [ -n "$GOLDEN_CHANGES" ]; then
            echo "✅ Golden file changes detected:"
            echo "$GOLDEN_CHANGES"
            
            # Validate structure
            ./scripts/validate_golden_structure.sh
            
            echo "📋 Golden file changes are properly structured"
          else
            echo "ℹ️  No golden file changes in this PR"
          fi
