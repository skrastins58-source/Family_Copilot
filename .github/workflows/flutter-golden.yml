name: Flutter Golden Tests

on:
  pull_request:
    branches: [ main, master, develop ]
  push:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  golden-tests:
    name: Golden Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache pub
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'

      - name: Install dependencies
        run: flutter pub get

      - name: Run golden tests and write artifacts
        env:
          GOLDEN_OUTDIR: build/goldens
        run: |
          mkdir -p "$GOLDEN_OUTDIR"
          flutter test --update-goldens --reporter=json > test-results.json || true
          # Copy produced golden images and any diff images to outdir if test framework writes them
          # Adjust paths according to your golden test setup

      - name: Upload golden artifacts
        uses: actions/upload-artifact@v4
        with:
          name: golden-artifacts
          path: build/goldens

      - name: Compare goldens and fail on diff
        id: compare
        run: |
          # Implement your comparison logic here. Example placeholder:
          if [ -d build/goldens/diff ] && [ "$(ls -A build/goldens/diff | wc -l)" -gt 0 ]; then
            echo "golden_diff=true" >> $GITHUB_OUTPUT
            exit 2
          else
            echo "golden_diff=false" >> $GITHUB_OUTPUT
          fi

      - name: Post preview comment with artifact links
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const runUrl = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const body = `Golden test artifacts: ${runUrl}\n\nDownload "golden-artifacts" from the workflow run artifacts.`;
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body
            })
