name: CI

on:
  push:
    branches:
      - main
      - master
      - develop

  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - main
      - master
      - develop

  pull_request_target:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - main
      - master
      - develop

jobs:
  build:
    name: Build APK & Web
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.25.0"

      - name: Enable web support
        run: flutter config --enable-web

      - name: Get dependencies
        run: flutter pub get

      - name: Build Android APK
        run: flutter build apk --debug

      - name: Build Web bundle
        run: flutter build web --release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            build/app/outputs/flutter-apk/app-debug.apk
            build/web

  test:
    name: Run tests & coverage
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ secrets.FLUTTER_VERSION }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc

      - name: Get dependencies
        run: flutter pub get

      - name: Run unit & widget tests with coverage
        run: flutter test --coverage

      - name: Generate coverage badge
        run: scripts/generate_coverage_badge.sh

      - name: Enforce coverage thresholds
        run: scripts/check_coverage.sh

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage

      - name: Commit coverage badge (if on main branch)
        if: github.ref == 'refs/heads/main'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add coverage/coverage-badge.json
          git diff --staged --quiet || git commit -m "Update coverage badge [skip ci]"
          git push

      - name: Run golden tests
        run: flutter test

      - name: Upload golden artifacts
        uses: actions/upload-artifact@v3
        with:
          name: golden-artifacts
          path: |
            goldens
            tests/diff

  pr-summary:
    name: Post PR Quality Summary
    if: github.event_name == 'pull_request'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download coverage report
        uses: actions/download-artifact@v3
        with:
          name: coverage-report
          path: coverage

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y bc

      - name: Generate coverage comment
        id: coverage
        run: |
          echo "coverage_comment<<EOF" >> $GITHUB_OUTPUT
          scripts/pr_coverage_comment.sh >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            const coverageComment = `${{ steps.coverage.outputs.coverage_comment }}`;
            
            // Find existing coverage comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('ðŸ“Š Coverage Report')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: coverageComment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: coverageComment
              });
            }
permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
