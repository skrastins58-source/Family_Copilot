
name: CI/CD Pipeline

# Trigger on push and pull_request events as requested
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  # Build job for Flutter project
  build:
    name: Build Flutter App
    runs-on: ubuntu-latest
    
    steps:
      # Use standard actions/checkout@v4 as specified
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Setup Flutter environment
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
      
      # Get dependencies
      - name: Install dependencies
        run: flutter pub get
      
      # Analyze code with flutter analyze
      - name: Analyze code
        run: flutter analyze
      
      # Build APK for Android
      - name: Build APK
        run: flutter build apk --release
      
      # Build web version
      - name: Build Web
        run: flutter build web --release
      
      # Upload build artifacts
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: flutter-apk
          path: build/app/outputs/flutter-apk/app-release.apk
      
      - name: Upload Web artifact
        uses: actions/upload-artifact@v4
        with:
          name: flutter-web
          path: build/web/

  # Test job for Flutter project
  test:
    name: Test Flutter App
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
      
      - name: Install dependencies
        run: flutter pub get
      
      # Create basic test if test directory doesn't exist
      - name: Ensure test directory exists
        run: |
          if [ ! -d "test" ]; then
            mkdir -p test
            cat > test/widget_test.dart << 'EOF'
          import 'package:flutter/material.dart';
          import 'package:flutter_test/flutter_test.dart';
          import 'package:family_copilot/main.dart';

          void main() {
            testWidgets('App smoke test', (WidgetTester tester) async {
              // Build our app and trigger a frame.
              await tester.pumpWidget(const MyApp());

              // Verify that the app starts without crashing
              expect(find.byType(MaterialApp), findsOneWidget);
            });
          }
          EOF
          fi
      
      # Run Flutter tests
      - name: Run tests
        run: flutter test --coverage
      
      # Upload test coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          fail_ci_if_error: false

  # Placeholder job for creating UI as requested
  create-ui:
    name: Create UI Components
    runs-on: ubuntu-latest
    needs: [build, test]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
      
      # Placeholder job content as specified
      - name: Building UI components
        run: |
          echo "Building UI..."
          echo "This is a placeholder job for UI automation"
          echo "Future implementations could include:"
          echo "- Automated UI component generation"
          echo "- Design token compilation"
          echo "- Asset optimization"
          echo "- UI testing automation"
      
      - name: UI Build Status
        run: |
          echo "âœ… UI components build process completed"
          echo "ğŸ“± Ready for UI automation integration"
=======
name: CI

on:
  push:
    branches:
      - main
      - master
      - develop

  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - main
      - master
      - develop

  pull_request_target:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - main
      - master
      - develop

jobs:
  build:
    name: Build APK & Web
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
       with:
  flutter-version: "3.25.0"


      - name: Enable web support
        run: flutter config --enable-web

      - name: Get dependencies
        run: flutter pub get

      - name: Build Android APK
        run: flutter build apk --debug

      - name: Build Web bundle
        run: flutter build web --release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            build/app/outputs/flutter-apk/app-debug.apk
            build/web

  test:
    name: Run tests & coverage
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ secrets.FLUTTER_VERSION }}

      - name: Get dependencies
        run: flutter pub get

      - name: Run unit & widget tests with coverage
        run: flutter test --coverage

      - name: Enforce coverage thresholds
        run: scripts/check_coverage.sh

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage

      - name: Run golden tests
        run: flutter test

      - name: Upload golden artifacts
        uses: actions/upload-artifact@v3
        with:
          name: golden-artifacts
          path: |
            goldens
            tests/diff

  pr-summary:
    name: Post PR Quality Summary
    if: github.event_name == 'pull_request'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Post PR summary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: node post-pr-summary.js

